import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

const initialState = {
  _id: null,
  createdAt: null,
  elementsTested: [
    {
      description: '',
      elementName: '',
      value: '',
    },
  ],
  location: {
    coordinates: ['', ''],
    county: '',
    type: '',
  },
  matrix: '',
  project: {
    _id: null,
    organization: '',
    projectName: '',
  },
  sampleDate: null,
  sampleNumber: '',
  sampleTime: null,
  stationName: '',
  stationNameTwo: '',
  updatedAt: null,
};

export const sampleSlice = createSlice({
  name: 'sample',
  initialState,
  reducers: {
    addSelectedSample: (state, action) => {
      // Redux Toolkit uses Immer which allows us to write "mutating" logic in reducers
      return (state = action.payload);
    },
    decrement: (state) => {
      return state;
    },
    removeSelectedSample: (state, action) => {
      return initialState;
    },
  },
});

// Export the actions generated by createSlice
export const { addSelectedSample, decrement, removeSelectedSample } =
  sampleSlice.actions;

// Export the reducer function as default
export default sampleSlice.reducer;
